1. Spring MVC 无项目
2. RequestMapping setting
3. EL
4. El Spring mvc 连接注意
5. spring mvc demo
6. spring error
7. spring ajax
8. <form:form>


官方文档：
http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/index.html

.............................................................
1. Spring MVC 无项目

创建spring mvc project demo

没有spring mvc project
   可能是电脑没有加载上
   重启电脑就ok了

demo1 UI 练习前后台传参

............................................................
2. RequestMapping setting

不能把控制器的注释名 + 方法的注释名与包含前台页面的的相同

不要用
@RequestMapping("user/login56")
这种形式，
因为再次转地址时候会
会在user这个下面搜寻RequestMappering
会报错，没有这个文件

...............................................................
3. EL

EL（Expression Language） 目的：为了使JSP写起来更加简单。

1）获取变量值

${username}   <-后台返回的参数名称
取出某一范围中名称为username的变量。
因为没有指定哪一个范围的username，
所以它会依序从Page、Request、Session、Application范围查找。
假如途中找到username，就直接回传，
不再继续找下去，但是假如全部的范围都没有找到时，就回传null。

2）[]与.运算符
     EL 提供.和[]两种运算符来存取数据。
     当要存取的属性名称中包含一些特殊字符，
     如.或?等并非字母或数字的符号，就一定要使用 []。
   例如：
     ${user.My-Name}应当改为${user["My-Name"] }
     如果要动态取值时，就可以用[]来做，而.无法做到动态取值。例如：
     ${sessionScope.user[data]}中data 是一个变量


3）等价关系：
< %=request. getParameter(“username”)% > 等价于 ${ param. username }
<%=request.getAttribute(“userlist”) %> 等价于$ { requestScope.userlist }
<%=user.getAddr( ) %> 等价于 ${user.addr}


........................................................................
4. El Spring mvc 连接注意

前台传后台
   <form action="robot/getAnswer" method="get">
      <input name="tagDesc" type="text">
   name与实体类属性名一样
   action与spring mvc controller RequestMapping 相同 

后台传前台
   获取对象
   model.addAttribute("qaCont", qaCont);
   ${qaCont}

   获取对象属性
   model.addAttribute("pq",pq);
   ${pq.qaCont}

引用spring 3.1.1 否则会出现406错误 

.........................................................................
5. spring mvc demo

maven 要引用 spring-webmvc

................................................................................................
6. spring error

error:		org.springframework.web.servlet.PageNotFound noHandlerFound
No mapping found for HTTP request with URI [/spring_test_002/userContoller/userManager]
in DispatcherServlet with name 'dispatcher'
solution:	p:prefix="/page/" 默认开始寻找的文件位置，找不到页面。
example: return "userpage/userManager"; 

.................................................................................................
7. spring ajax 


..................................................................................................
8. <form:form commandName="account">
	指定form默认自动绑定的是Model的command属性值，那么当我的form对象对应的属性名称不是command的时候，
	应该怎么办呢？对于这种情况，Spring给我们提供了一个commandName属性，
	我们可以通过该属性来指定我们将使用Model中的哪个属性作为form需要绑定的command对象。
	除了commandName属性外，指定modelAttribute属性也可以达到相同的效果。
但是在spring controller中要new
	request.setAttribute("accout", new Account());

......................................................................................................
9. InitializingBean  
InitializingBean接口为bean提供了初始化方法的方式，
它只包括afterPropertiesSet方法，凡是继承该接口的类，在初始化bean的时候会执行该方法。

.......................................................................................................
10. spring task schedule <task:scheduler> <task:scheduled-tasks> <task:scheduled>

xml配置
application.xml引入spring-tasks配置文件
<>

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
          http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
	<!-- default thread pool will only have a single thread. -->
	<!-- 调度线程池的大小，调度线程在被调度任务完成前不会空闲 -->
	<task:scheduler id="myScheduler" pool-size="1" />
	<task:scheduled-tasks scheduler="myScheduler">
		<!-- 刷新客服在线状态,通过任务管理器调用,时间间隔10分钟 -->
		<task:scheduled ref="scheduledTaskManager" method="checkCustomerServiceOnLineStatus"
			fixed-rate="600000" cron="0 * * * * ?" />

	</task:scheduled-tasks>
</beans>

ref ： bean   例子：@Component(value="scheduledTaskManager")
		    public class ScheduledTaskManager 
fixed-rate ：下一次的间隔时间
initial-delay：初始延迟

方法：
package com.mendian.component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import com.mendian.config.ServerUtil;
/**
 * 预约任务管理
 * 定时任务工具
 * 
 * @ClassName: JobManager
 * @author jh
 * @date 2016-5-26 下午2:52:54
 * 
 */
@Component(value="scheduledTaskManager")
public class ScheduledTaskManager  {
	private static Logger LOG = LoggerFactory.getLogger(ScheduledTaskManager.class);

	public void checkCustomerServiceOnLineStatus() {
		LOG.info("checkCustomerServiceOnLineStatus start");
		ServerUtil.refreshCustomerServiceOnLineStatus();
		LOG.info("checkCustomerServiceOnLineStatus end");
	}

}



------------------------------------------------------------------------------------------------------
11. spring annotation ehcache  | ehcache | 
