1. 使用数据库,创建数据库,删除数据库
2. 创建一个表，删除表
3. 增删改查
4. 从一个表中copy数据打另一个表中
5. 引号的使用
6. where
7. order by
8. 分号
9. sql语句拼接到string字符串传产问题
10. PowerDesigner
11. exists
12. PL/SQL 
13. Navicat
14. sql server 存储过程


...................................................
1. 使用数据库,创建数据库,删除数据库
   use kyc2
   create database animail
   drop database animail

.....................................................
2. 创建一个表，删除表
CREATE TABLE 表名称
(
列名称1 数据类型,
列名称2 数据类型,
列名称3 数据类型,
....
)

例：
create table dog(
      id int primary key,
      name text 
   )

   drop table dog


数据类型（data_type）
规定了列可容纳何种数据类型。
下面的表格包含了SQL中最常用的数据类型
数据类型

仅容纳整数。在括号内规定数字的最大位数。
integer(size)
int(size)
smallint(size)
tinyint(size)

容纳带有小数的数字。
"size" 规定数字的最大位数。
"d" 规定小数点右侧的最大位数。
decimal(size,d)
numeric(size,d)

容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。
在括号中规定字符串的长度。
char(size)

容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。
在括号中规定字符串的最大长度。
varchar(size)	

容纳日期。
date(yyyymmdd)

SQL 约束 (Constraints)约束用于限制加入表的数据的类型
可以在创建表时规定约束（通过 CREATE TABLE 语句），
或者在表创建之后也可以（通过 ALTER TABLE 语句）。

1）SQL NOT NULL 约束
NOT NULL 约束强制列不接受 NULL 值。
NOT NULL 约束强制字段始终包含值。
这意味着，如果不向字段添加值，
就无法插入新记录或者更新记录。
下面的 SQL 语句强制 "Id_P" 列和 "LastName" 列不接受 NULL值：
CREATE TABLE Persons
(
Id_P int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255)
)

2）UNIQUE 约束唯一标识数据库表中的每条记录。
UNIQUE 和 PRIMARY KEY 约束均为列或列集合
提供了唯一性的保证。
PRIMARY KEY 拥有自动定义的 UNIQUE 约束。
请注意，每个表可以有多个 UNIQUE 约束，
但是每个表只能有一个 PRIMARY KEY 约束。

MySQL:
CREATE TABLE Persons
(
  UNIQUE (Id_P)
)
SQL Server / Oracle / MS Access:
CREATE TABLE Persons
(
Id_P int NOT NULL UNIQUE
)
如果需要命名 UNIQUE 约束，以及为多个列定义 UNIQUE 约束：
MySQL / SQL Server / Oracle / MS Access:
CREATE TABLE Persons
(
Id_P int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)
)

撤销 UNIQUE 约束
MySQL:
ALTER TABLE Persons
DROP INDEX uc_PersonID

SQL Server / Oracle / MS Access:
ALTER TABLE Persons
DROP CONSTRAINT uc_PersonID

3）primary key
PRIMARY KEY 约束唯一标识数据库表中的每条记录。
主键必须包含唯一的值。
主键列不能包含 NULL 值。
每个表都应该有一个主键，并且每个表只能有一个主键。

MySQL:
CREATE TABLE Persons
(
PRIMARY KEY (Id_P)
)
SQL Server / Oracle / MS Access:
CREATE TABLE Persons
(
Id_P int NOT NULL PRIMARY KEY,
)

..................................................................
3. 增删改查
 
   /*增加一行记录 */
   insert into dog values(12,'helloworld')
   可以指定所要插入数据的列：
   INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)

   更改表中的现有数据
   /* 改变一行记录*/
   UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值
   update dog set name = 'jjjjj' where id = '12'

   /*查询一列记录*/
   SELECT 列名称,列名称 FROM 表名称
   select id from dog 

   /*删除一行记录*/
   delete id=1 from dog
...........................................................
4. 从一个表中copy数据打另一个表中
  
   insert into cat(id) select id from dog;

.........................................................
5. 引号的使用

条件值周围使用的是单引号。
SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号)
如果是数值，请不要使用引号。

.........................................................
6. where

where指定查询返回行的条件。
SELECT 列名称 FROM 表名称 WHERE 列 运算符 值
select id from dog where id=1

  AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。
    1AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。
    2如果第一个条件和第二个条件都成立，
    则 AND 运算符显示一条记录。
    3如果第一个条件和第二个条件中只要有一个成立，
    则 OR 运算符显示一条记录。 
    
    SELECT * FROM Persons WHERE
    (FirstName='Thomas' OR FirstName='William')
    AND LastName='Carter'
....................................................................
7. order by

ORDER BY 语句用于对结果集进行排序。
ORDER BY 语句用于根据指定的列对结果集进行排序。
ORDER BY 语句默认按照升序对记录进行排序。
按照降序对记录进行排序，可以使用 DESC 关键字。

以字母顺序显示公司名称（Company），   
并以数字顺序显示顺序号（OrderNumber）  
SELECT Company, OrderNumber FROM 
Orders ORDER BY Company, OrderNumber
先看公司，公司相同，再看字母

......................................................................
8. 分号
SQL 语句后面的分号？
某些数据库系统要求在每条 SQL 命令的末端使用分号。
在此不使用分号。
分号是在数据库系统中分隔每条 SQL 语句的标准方法，
这样就可以在对服务器的相同请求中执行一条以上的语句。
如果您使用的是 MS Access 和 SQL Server 2000，则不必在每条
SQL 语句之后使用分号，
不过某些数据库软件要求必须使用分号。

........................................................................
9. sql语句拼接到string字符串传产问题
	1.sql注入
	2.内存浪费（多次sql）

..........................................................................
10. PowerDesigner

改变table字体：
Tools -----> Display Preference....--> Table --> Format --> Modify --> Font

新建数据库工程：
file -> new model -> model types -> physical data model
->physical diagram

保存文件 pdb,pdm

新建表
	在设计属性(字段)的时候，三个字母(M、P、D)分别表示：
		M：是否为空；(√表示不允许为空)
		P：是否为主键；
		D：是否在该软件的视图中显示
	设置主键自增：
		Columns选项卡,选中整列,查看列属性,
		打开另外一个窗口,右下角有个Identity,勾上即可.

新建外键：

生成数据库：
	Database -> Generate Database

	不生成外键：
	   Database -> Generate Database ->options

..................................................................................

		


..........................................................................
11. exists

指定一个子查询，检测行的存在。返回 true or false

..........................................................................
12. PL/SQL

用于连接Oricle数据库

连接Oricle数据库配置

1.安装Oricle客户端

2.配置Oricle客户端
	将instantclient_11_2解压到D:\java\app\jhon\product下

3.配置环境变量（instantclient需要）
	TNS_ADMIN
	D:\java\app\jhon\product\instantclient_11_2

	ORACLE_HOME
	D:\java\app\jhon\product\instantclient_11_2

	path
	当安装client时，在path最前面自动配置为
	D:\java\app\jhon\product\11.2.0\client_1

4. PL/SQL -> 工具(tools) ->首选项(persistense)
	-> Oricle -> 连接(contents)

5.中文乱码
	配置环境变量
	NLS_LANG
	SIMPLIFIED CHINESE_CHINA.ZHS16GBK


快捷键：
	f8:执行
	f10：提交
	
.....................................................................
13. Navicat

连接数据库
	Navicat连接Oricle database 配置同PL/SQL相同
		在 tools-> options->oci中加入client下的oci.dll就行

	Navicat连接SQL Server
		先下载sqlncli 软件并安装
		在创建连接的时候没有端口号选项，添加端口号，（例）10.1.41.215,3011


快捷键：
	Ctrl + R 运行所有
	Ctrl + Shift + R 运行选中

导出表结构，视图结构
	导出表：
		表名->右击->duplicate->structure only
	导出视图：
		视图名->右击->object information->第二个 ddl 

..................................................................................................................
14. sql server 存储过程

调用系统存储过程----------------------------------------
exec sp_databases  --调用系统存储过程，查询数据库
exec sp_tables;    --调用系统存储过程，查询当前数据库下的表
exec sp_helpdb     --调用系统存储过程，查询当前数据库的基本信息

不带参数的存储过程--------------------------------------
在sqlserver下创建存储过程

//navicat，sqlserver客户端都可以使用
create PROCEDURE proc_meetinginfo 
AS
select * from MEETING_INFO
GO

执行存储过程
EXEC proc_meetinginfo

带参数的存储过程----------------------------------------
创建
create PROCEDURE proc_meetinginfo2(
	@name varchar(255)
)
AS
	select * from MEETING_INFO WHERE MEETING_NAME=@name
GO

如果不赋值参数类型大小，大小默认为1

执行1
--sql server 可以用，navicate不能用
DECLARE @name varchar(255);
set @name='vb';
EXEC proc_meetinginfo2 @name

执行2
EXEC proc_meetinginfo2 'vb'

带输出参数存储过程 ---------------------------------------

create proc proc_meetinginfo3(
    @name varchar(20) out, --输出参数
    @no varchar(20) output--输入输出参数
)
as
    select @name = meeting_name, @no = MEETING_NO from MEETING_INFO where meeting_no = @no;
go

-- 执行
declare 
        @name varchar(20),
        @no varchar(20);
set @no = '2015-01';
exec proc_meetinginfo3 @name out, @no output;
select @name as name, @no as no; 查询返回的参数
print @name + '#' + @no  消息中显示返回的参数
----------------------------------------------------------------------------------------------------


