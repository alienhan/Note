<html xmlns:o="urn:schemas-microsoft-com:office:office"
         xmlns:w="urn:schemas-microsoft-com:office:word"
         xmlns="http://www.w3.org/TR/REC-html40">内容来自：<a href="http://www.03964.com">文档资料库</a>http://www.03964.com/<br>更多"相对完善的Java通过JDBC操纵mysql的例子"相关资料请点击<a href="http://www.03964.com/search.php?q=%CF%E0%B6%D4%CD%EA%C9%C6%B5%C4Java%CD%A8%B9%FDJDBC%B2%D9%D7%DDmysql%B5%C4%C0%FD%D7%D3">这里</a><p>create database xxx;<br />
mysql&gt; Create TABLE MYTABLE (name VARCHAR(20), sex CHAR(1));<br />
1、建表<br />
命令：create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]); <br />
<br />
mysql&gt; create table MyClass(<br />
&gt; id int(4) not null primary key auto_increment,<br />
&gt; name char(20) not null,<br />
&gt; sex int(4) not null default &#039;0&#039;,<br />
&gt; degree double(16,2));<br />
2、获取表结构<br />
命令： desc 表名，或者show columns from 表名<br />
mysql&gt;DESCRIBE MyClass<br />
mysql&gt; desc MyClass; <br />
mysql&gt; show columns from MyClass;<br />
3、删除表<br />
命令：drop table &lt;表名&gt;<br />
例如：删除表名为 MyClass 的表<br />
mysql&gt; drop table MyClass;<br />
4、插入数据<br />
命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]<br />
例如，往表 MyClass中插入二条记录, 这二条记录表示：编号为1的名为Tom的成绩为96.45, 编号为2 的名为Joan 的成绩为82.99，编号为3 的名为Wang 的成绩为96.5.<br />
mysql&gt; insert into MyClass values(1,&#039;Tom&#039;,96.45),(2,&#039;Joan&#039;,82.99), (2,&#039;Wang&#039;, 96.59);<br />
5、查询表中的数据<br />
1)、查询所有行<br />
命令： select &lt;字段1，字段2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;<br />
例如：查看表 MyClass 中所有数据<br />
mysql&gt; select * from MyClass;<br />
2）、查询前几行数据<br />
例如：查看表 MyClass 中前2行数据<br />
mysql&gt; select * from MyClass order by id limit 0,2; <br />
<br />
或者： <br />
<br />
mysql&gt; select * from MyClass limit 0,2;<br />
6、删除表中数据<br />
命令：delete from 表名 where 表达式<br />
例如：删除表 MyClass中编号为1 的记录<br />
mysql&gt; delete from MyClass where id=1;<br />
7、修改表中数据：update 表名 set 字段=新值,… where 条件<br />
mysql&gt; update MyClass set name=&#039;Mary&#039; where id=1;<br />
7、在表中增加字段： <br />
<br />
命令：alter table 表名 add字段 类型 其他; <br />
例如：在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为0 <br />
mysql&gt; alter table MyClass add passtest int(4) default &#039;0&#039;<br />
8、更改表名：<br />
命令：rename table 原表名 to 新表名; <br />
例如：在表MyClass名字更改为YouClass <br />
mysql&gt; rename table MyClass to YouClass; <br />
<br />
更新字段内容<br />
update 表名 set 字段名 = 新内容<br />
update 表名 set 字段名 = replace(字段名,&#039;旧内容&#039;,&#039;新内容&#039;); <br />
<br />
文章前面加入4个空格<br />
update article set content=concat(&#039;　　&#039;,content); <br />
<br />
<br />
<br />
<br />
<br />
<br />
package com.amaker.util;<br />
<br />
import java.sql.DriverManager;<br />
<br />
import com.mysql.jdbc.Connection;<br />
<br />
public class DButil {<br />
	public static void main(String[] args){<br />
		DButil util=new DButil();<br />
		java.sql.Connection conn=util.getConnection();<br />
		System.out.println(conn);}<br />
		public java.sql.Connection getConnection(){<br />
		try{<br />
		Class.forName(&quot;com.mysql.jdbc.Driver&quot;);<br />
		return DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/jj&quot;,&quot;root&quot;,&quot;111&quot;);}<br />
		catch(Exception e){<br />
		e.printStackTrace();}<br />
		return null;}<br />
		public void closeConnection(Connection conn){<br />
			if(conn!=null){<br />
			try{<br />
			conn.close();}<br />
			catch(Exception e){<br />
			e.printStackTrace();}<br />
			}}<br />
		 <br />
<br />
}<br />
<br />
<br />
package com.amaker.test;<br />
<br />
import java.sql.ResultSet;<br />
<br />
import com.amaker.util.DButil;<br />
import com.mysql.jdbc.Statement;<br />
<br />
public class Test {<br />
	public static void main(String[] args){<br />
		Test test=new Test();<br />
		test.list();}<br />
		public void list(){<br />
		DButil util=new DButil();<br />
		java.sql.Connection conn=util.getConnection(); <br />
		String sql=&quot;select id,username,password from UserTbl&quot;;<br />
		try{<br />
		java.sql.Statement stmt=conn.createStatement();<br />
		ResultSet rs=stmt.executeQuery(sql);<br />
		while(rs.next()){<br />
		int id=rs.getInt(&quot;id&quot;);<br />
		String username=rs.getString(2);<br />
		String password=rs.getString(3);<br />
		System.out.println(id+&quot;:&quot;+username+&quot;:&quot;+password);}}<br />
		catch(Exception e){<br />
		e.printStackTrace();}}}<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
 安装JDK<br />
<br />
安装好JDK后，再配置JDK的环境变量：<br />
在“我的电脑”上点右键―&gt;“属性”―&gt;“高级”―&gt; “环境变量(N)”。<br />
<br />
新建系统变量JAVA_HOME：C:/Program Files/Java/jdk1.5.0_06；<br />
<br />
新建系统变量CLASSPATH：.;%JAVA_HOME%/lib;（注意：点号表示当前目录，不能省略）<br />
<br />
在系统变量Path的值的前面加入以下内容：%JAVA_HOME%/bin;(注意:这里的分号不能省略)<br />
<br />
到这里，JDK安装完毕。<br />
<br />
<br />
2.安装Tomcat<br />
<br />
安装好Tomcat后，再配置Tomcat的环境变量：<br />
在“我的电脑”上点右键―&gt;“属性”―&gt;“高级”―&gt; “环境变量(N)”。<br />
<br />
新建系统变量CATALINA_HOME：D:/jakarta-tomcat-5.0.30<br />
<br />
在系统变量CLASSPATH的值的后面加入：%CATALINA_HOME%/common/lib;<br />
<br />
在系统变量Path的值中&quot;%JAVA_HOME%/bin;&quot;的后面加入以下内容：%CATALINA_HOME%/bin;<br />
<br />
到这里，Tomcat安装完毕。<br />
<br />
<br />
配置好以上环境变量之后，各系统变量的值如下：<br />
JAVA_HOME:C:/Program Files/Java/jdk1.5.0_06<br />
CATALINA_HOME:D:/jakarta-tomcat-5.0.30<br />
CLASSPATH:.;%JAVA_HOME%/lib;%CATALINA_HOME%/common/lib;<br />
Path:%JAVA_HOME%/bin;%CATALINA_HOME%/bin;%SystemRoot%/system32;%SystemRoot%;%<br />
<br />
SystemRoot%/System32/Wbem<br />
<br />
<br />
------------------------------------------------------------------------<br />
测试JDK和Tomcat<br />
<br />
打开cmd进行测试JDK是否配置成功： <br />
<br />
Microsoft Windows XP [版本 5.1.2600]<br />
(C) 版权所有 1985-2001 Microsoft Corp.<br />
<br />
C:/Documents and Settings/Administrator&gt;java <br />
Usage: java [-options] class [args...]<br />
           (to execute a class)<br />
   or  java [-options] -jar jarfile [args...]<br />
           (to execute a jar file)<br />
<br />
where options include:<br />
    -client       to select the &quot;client&quot; VM<br />
    -server       to select the &quot;server&quot; VM<br />
    -hotspot      is a synonym for the &quot;client&quot; VM  [deprecated]<br />
                  The default VM is client.<br />
<br />
    -cp &lt;class search path of directories and zip/jar files&gt;<br />
    -classpath &lt;class search path of directories and zip/jar files&gt;<br />
                  A ; separated list of directories, JAR archives,<br />
                  and ZIP archives to search for class files.<br />
    -D&lt;name&gt;=&lt;value&gt;<br />
                  set a system property<br />
    -verbose[:class|gc|jni]<br />
                  enable verbose output<br />
    -version      print product version and exit<br />
    -version:&lt;value&gt;<br />
                  require the specified version to run<br />
    -showversion  print product version and continue<br />
    -jre-restrict-search | -jre-no-restrict-search<br />
                  include/exclude user private JREs in the version search<br />
    - -help      print this help message<br />
    -X            print help on non-standard options<br />
    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]<br />
    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]<br />
                  enable assertions<br />
    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]<br />
    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]<br />
                  disable assertions<br />
    -esa | -enablesystemassertions<br />
                  enable system assertions<br />
    -dsa | -disablesystemassertions<br />
                  disable system assertions<br />
    -agentlib:&lt;libname&gt;[=&lt;options&gt;]<br />
                  load native agent library &lt;libname&gt;, e.g. -agentlib:hprof<br />
                    see also, -agentlib:jdwp=help and -agentlib:hprof=help<br />
    -agentpath:&lt;pathname&gt;[=&lt;options&gt;]<br />
                  load native agent library by full pathname<br />
    -javaagent:&lt;jarpath&gt;[=&lt;options&gt;]<br />
                  load Java programming language agent, see java.lang.instrument<br />
<br />
    -splash:&lt;imagepath&gt;<br />
                  show splash screen with specified image<br />
<br />
C:/Documents and Settings/Administrator&gt;javac --输入javac显示下面的内容就是配置成功<br />
用法：javac &lt;选项&gt; &lt;源文件&gt;<br />
其中，可能的选项包括：<br />
  -g                         生成所有调试信息<br />
  -g:none                    不生成任何调试信息<br />
  -g:{lines,vars,source}     只生成某些调试信息<br />
  -nowarn                    不生成任何警告<br />
  -verbose                   输出有关编译器正在执行的操作的消息<br />
  -deprecation               输出使用已过时的 API 的源位置<br />
  -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置<br />
  -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置<br />
  -sourcepath &lt;路径&gt;           指定查找输入源文件的位置<br />
  -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置<br />
  -extdirs &lt;目录&gt;              覆盖安装的扩展目录的位置<br />
  -endorseddirs &lt;目录&gt;         覆盖签名的标准路径的位置<br />
  -proc:{none,only}          控制是否执行注释处理和/或编译。<br />
  -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...]要运行的注释处理程序的名称；绕过默认<br />
的搜索进程<br />
  -processorpath &lt;路径&gt;        指定查找注释处理程序的位置<br />
  -d &lt;目录&gt;                    指定存放生成的类文件的位置<br />
  -s &lt;目录&gt;                    指定存放生成的源文件的位置<br />
  -implicit:{none,class}     指定是否为隐式引用文件生成类文件<br />
  -encoding &lt;编码&gt;             指定源文件使用的字符编码<br />
  -source &lt;版本&gt;               提供与指定版本的源兼容性<br />
  -target &lt;版本&gt;               生成特定 VM 版本的类文件<br />
  -version                   版本信息<br />
  -help                      输出标准选项的提要<br />
  -Akey[=value]              传递给注释处理程序的选项<br />
  -X                         输出非标准选项的提要<br />
  -J&lt;标志&gt;                     直接将 &lt;标志&gt; 传递给运行时系统<br />
<br />
<br />
C:/Documents and Settings/Administrator&gt;<br />
<br />
 <br />
<br />
测试Tomcat是否配置成功：<br />
<br />
<br />
&lt;script type=&quot;text/javascript&quot;&gt; <br />
 function startTime(){ <br />
  var today=new Date() <br />
  var week=new Array(&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;); <br />
  var year=today.getYear() <br />
  var month=today.getMonth()+1 <br />
  var date=today.getDate() <br />
  var day=today.getDay() <br />
  var h=today.getHours() <br />
  var m=today.getMinutes() <br />
  var s=today.getSeconds() <br />
  // add a zero in front of numbers&lt;10 <br />
  h=checkTime(h) <br />
  m=checkTime(m) <br />
  s=checkTime(s) <br />
  document.getElementById(&#039;time&#039;).innerHTML=&quot; &quot;+year+&quot;年&quot;+month+&quot;月&quot;+date+&quot;日  &quot;+week[day]+&quot;  &quot;+h+&quot;:&quot;+m+&quot;:&quot;+s+&quot; &quot; <br />
  t=setTimeout(&#039;startTime()&#039;,500) <br />
 } <br />
 <br />
 function checkTime(i){ <br />
 if (i&lt;10)  <br />
   {i=&quot;0&quot; + i} <br />
   return i <br />
 } <br />
&lt;/script&gt; <br />
 <br />
&lt;body onload=&quot;startTime()&quot;&gt; <br />
 <br />
&lt;div id=&quot;time&quot;&gt;&lt;/div</p>内容来自：<a href="http://www.03964.com">文档资料库</a>http://www.03964.com/<br>更多"相对完善的Java通过JDBC操纵mysql的例子"相关资料请点击<a href="http://www.03964.com/search.php?q=%CF%E0%B6%D4%CD%EA%C9%C6%B5%C4Java%CD%A8%B9%FDJDBC%B2%D9%D7%DDmysql%B5%C4%C0%FD%D7%D3">这里</a></html>